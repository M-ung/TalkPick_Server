package talkPick.topic.application;

import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import talkPick.domain.topic.application.TopicCommandService;
import talkPick.domain.topic.domain.TopicStat;
import talkPick.domain.topic.exception.TopicNotFoundException;
import talkPick.domain.topic.port.out.TopicLikeHistoryCommandRepositoryPort;
import talkPick.domain.topic.port.out.TopicStatQueryRepositoryPort;
import talkPick.global.exception.ErrorCode;
import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.BDDMockito.given;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
class TopicCommandServiceTest {
    @InjectMocks
    private TopicCommandService topicCommandService;
    @Mock
    private TopicStatQueryRepositoryPort topicStatQueryRepositoryPort;
    @Mock
    private TopicLikeHistoryCommandRepositoryPort topicLikeHistoryCommandRepositoryPort;

    @Test
    @DisplayName("âœ… ì¢‹ì•„ìš” ì„±ê³µ í…ŒìŠ¤íŠ¸")
    void ì¢‹ì•„ìš”_ì„±ê³µ_í…ŒìŠ¤íŠ¸() {
        // given
        Long memberId = 1L;
        Long topicId = 100L;
        TopicStat mockTopicStat = mock(TopicStat.class);

        given(topicStatQueryRepositoryPort.findTopicStatByTopicId(topicId)).willReturn(mockTopicStat);

        // when
        topicCommandService.addLike(memberId, topicId);

        // then
        verify(mockTopicStat).addLike();
        verify(topicLikeHistoryCommandRepositoryPort).save(memberId, topicId);
    }

    @Test
    @DisplayName("ðŸš¨ ì—†ëŠ” TopicIdë¡œ ì¢‹ì•„ìš” ì‹¤íŒ¨ í…ŒìŠ¤íŠ¸")
    void ì—†ëŠ”_TopicIdë¡œ_ì¢‹ì•„ìš”_ì‹¤íŒ¨_í…ŒìŠ¤íŠ¸() {
        // given
        Long memberId = 1L;
        Long topicId = 100L;

        given(topicStatQueryRepositoryPort.findTopicStatByTopicId(topicId)).willThrow(new TopicNotFoundException(ErrorCode.TOPIC_NOT_FOUND));

        // when && then
        assertThrows(TopicNotFoundException.class, () -> topicCommandService.addLike(memberId, topicId));
    }
}